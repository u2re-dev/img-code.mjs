const e=(e,A)=>e.filter((({code:e})=>(new TextDecoder).decode(e).toUpperCase()==A)),A=(()=>{const e=[];for(let A=0;A<256;A++){let n=A;for(let e=0;e<8;e++)n=1&n?3988292384^n>>>1:n>>>1;e.push(n)}return e})(),n=new Uint8Array([139,74,78,71,13,10,26,10]),t=new Uint8Array([137,80,78,71,13,10,26,10]),r=new Uint8Array([0,0,0,0,73,69,78,68,174,66,96,130]);Uint8Array.fromBase64||(Uint8Array.fromBase64=e=>{if("undefined"==typeof atob)throw Error("atob not available");const A=atob(e),n=A.length,t=new Uint8Array(n);for(let e=0;e<n;e++)t[e]=A.charCodeAt(e);return t});const a=e=>{if(e[13])throw Error("Only PNG alpha compression supported");const n=new Uint8Array(25);n.set(new Uint8Array([0,0,0,13,73,72,68,82]),0),n.set(new Uint8Array(e.buffer,e.byteOffset+0,8),8),n.set(new Uint8Array([e[12],0,0,e[14],e[15]]),16);const t=((e,n=-1)=>{let t=n;for(let n=0;n<e.length;n++)t=t>>>8^A[255&(t^e[n])];return~t>>>0})(n.subarray(4,21));return n.set(new Uint8Array([t>>>24&255,t>>>16&255,t>>>8&255,255&t]),21),n},o=(e,A)=>{const n=new VideoFrame(e,{timestamp:0,alpha:"discard"});return n.copyTo(A,{format:"RGBX"}),n.close(),A};export const decodeJNG=async A=>{const i=(A=>{if(new Uint8Array(A,0,8).some(((e,A)=>n[A]!=e)))throw Error("Not a valid JNG file");let t=8;const r=[],a=new DataView(A,0);for(;t<a.byteLength;){const e=a.getUint32(t,!1);if(e+12+t>A.byteLength)break;const n=new Uint8Array(A,t+4,4),o=a.getUint32(t+e+8,!1),i=new Uint8Array(A,t+8,e),w=new Uint8Array(A,t,e+12);r.push({length:e,code:n,A:o,data:i,t:w}),t+=e+12}return{o:r,i:e(r,"JDAT").map((({data:e})=>e)),l:e(r,"JDAA").map((({data:e})=>e)),p:e(r,"IDAT").map((({t:e})=>e))}})(A),w=new Blob(i.i,{type:"image/jpeg"});let l=null;if(i.p?.length>0){const e=i.o.find((({code:e})=>"JHDR"===(new TextDecoder).decode(e)));l=new Blob([t,a(e.data),...i.p,r],{type:"image/png"})}else i.l?.length>0&&(l=new Blob(i.l,{type:"image/jpeg"}));const c={I:"none",B:"default"},s=await createImageBitmap(w,c),y=l?await createImageBitmap(l,c):null,g=(y?await(Promise.try((async()=>{const e=s.width*s.height*4,A=0+e,n=Uint8Array.fromBase64("AGFzbQEAAAABCAFgBH9/f38AAwIBAAUFAQEQgEAHGAIGbWVtb3J5AgALbWVyZ2VfYWxwaGEAAArUAQHRAQMBfwR7A38CQANAIAQgA08NASABIARq/QAEACEFIAIgBGr9AAQAIQYgBiAG/Q0ABAgMAAQIDAAECAwABAgMIQcgBSAH/Q0AAQIQBAUGEQgJChIMDQ4TIQggACAEaiAI/QsEACAEQRBqIQQMAAsLAkADQCAEIANPDQEgASAEaiEJIAIgBGohCyAAIARqIQogCiAJLQAAOgAAIApBAWogCUEBai0AADoAACAKQQJqIAlBAmotAAA6AAAgCkEDaiALLQAAOgAAIARBBGohBAwACwsL"),t=(await WebAssembly.instantiate(n)).instance.exports;t.memory.grow(2*e/65536);const r=t.memory.buffer;o(s,new Uint8ClampedArray(r,0,e)),o(y,new Uint8ClampedArray(r,A,e)),t.merge_alpha(0,0,A,e);const a=new Uint8ClampedArray(r,0,e);return new ImageData(a,s.width,s.height,{})}))?.catch?.(console.warn.bind(console))):null)??s,p=new OffscreenCanvas(s.width,s.height);return p.getContext("2d",{desynchronized:!0,willReadFrequently:!0,antialias:!1,powerPreference:"low-power",premultipliedAlpha:!1})?.[g instanceof ImageData?"putImageData":"drawImage"]?.(g,0,0),(async(e,A)=>{const n=new Set(["JDAT","JDAA","IDAT","IHDR","JHDR","IEND","JSEP"]),t=A.filter((({code:e})=>!n.has((new TextDecoder).decode(e).toUpperCase()))).map((({t:e})=>e)),r=(e=>{const A=new Uint8Array(e);let n=8;const t=[A.subarray(0,8)];for(;n<A.length;){const e=A[n]<<24|A[n+1]<<16|A[n+2]<<8|A[n+3];"sRGB"!==String.fromCharCode(...A.subarray(n+4,n+8))&&t.push(A.subarray(n,n+12+e)),n+=12+e}return t})(await e.arrayBuffer());return r.splice(2,0,...t),new Blob(r,{type:"image/png"})})(await p.convertToBlob({type:"image/png"}),i.o)};