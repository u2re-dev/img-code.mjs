const A=(()=>{const A=[];for(let n=0;n<256;n++){let e=n;for(let A=0;A<8;A++)e=1&e?3988292384^e>>>1:e>>>1;A.push(e)}return A})(),n=new Uint8Array([139,74,78,71,13,10,26,10]),e=new Uint8Array([137,80,78,71,13,10,26,10]),r=new Uint8Array([0,0,0,0,73,69,78,68,174,66,96,130]),t={type:"image/png"},a={type:"image/jpeg"},i=new TextDecoder,o=(new TextEncoder,(A,n)=>A.filter((({type:A})=>A.toUpperCase()==n))),w=(A=>{if(Uint8Array.fromBase64)return Uint8Array.fromBase64(A);if("undefined"==typeof atob)throw Error("No-atob");const n=atob(A),e=n.length,r=new Uint8Array(e);for(let A=0;A<e;A++)r[A]=n.charCodeAt(A);return r})("AGFzbQEAAAABEAJgBH9/f38AYAR/f39/AX8CDwEDZW52Bm1lbW9yeQIAAQMDAgABBw0CA21hYwAAA3dwaQABCuQEAtEBAwF/BHsDfwJAA0AgBCADTw0BIAEgBGr9AAQAIQUgAiAEav0ABAAhBiAGIAb9DQAECAwABAgMAAQIDAAECAwhByAFIAf9DQABAhAEBQYRCAkKEgwNDhMhCCAAIARqIAj9CwQAIARBEGohBAwACwsCQANAIAQgA08NASABIARqIQkgAiAEaiELIAAgBGohCiAKIAktAAA6AAAgCkEBaiAJQQFqLQAAOgAAIApBAmogCUECai0AADoAACAKQQNqIAstAAA6AAAgBEEEaiEEDAALCwuOAwEOfyAAQfgAOgAAIABBAWpBAToAACAAQQJqIQcgAkEEbEEBaiEEIAQgA2whBUEBIQhBACEJQQAhCgJAA0AgCiAFTw0BIAUgCmshDSANQf//AyANQYCABEkbIQwgDCANRiEOIAdBAUEAIA4bOgAAIAdBAWogDEH/AXE6AAAgB0ECaiAMQQh2OgAAIAdBA2pB/wEgDEH/AXFzOgAAIAdBBGpB/wEgDEEIdnM6AAAgB0EFaiEHIAohCwJAA0AgCiALIAxqTw0BIAogBHAhDyAPRQRAIAdBADoAACAHQQFqIQcgCkEBaiEKBSAKIARuIRAgCiAEcEEBayERIAEgECACQQRsbCARamohBiAGLQAAIQ8gByAPOgAAIAggD2ohCCAIQf//A3EhCCAJIAhqIQkgCUH//wNxIQkgB0EBaiEHIApBAWohCgsMAAsLDAALCyAHIAlBCHY6AAAgB0EBaiAJQf8BcToAACAHQQJqIAhBCHY6AAAgB0EDaiAIQf8BcToAACAHQQRqIQcgByAAaw8L"),B=(n,e=-1)=>{let r=e;for(let e=0;e<n.length;e++)r=r>>>8^A[255&(r^n[e])];return~r>>>0},E=A=>{if(A[13])throw Error("No PNG alpha.");const n=new Uint8Array(25);n.set(new Uint8Array([0,0,0,13,73,72,68,82]),0),n.set(new Uint8Array(A.buffer,A.byteOffset+0,8),8),n.set(new Uint8Array([A[12],0,0,A[14],A[15]]),16);const e=B(n.subarray(4,21));return n.set(new Uint8Array([e>>>24&255,e>>>16&255,e>>>8&255,255&e]),21),n},g=(A,n)=>{const e=new Uint8Array(25);e.set(new Uint8Array([0,0,0,13,73,72,68,82]),0),e.set(new Uint8Array([A>>>24&255,A>>>16&255,A>>>8&255,255&A]),8),e.set(new Uint8Array([n>>>24&255,n>>>16&255,n>>>8&255,255&n]),12),e.set(new Uint8Array([8,6,0,0,0]),16);const r=B(e.subarray(4,21));return e.set(new Uint8Array([r>>>24&255,r>>>16&255,r>>>8&255,255&r]),21),e},I=async(A,n)=>{const e=new VideoFrame(A,{timestamp:0,alpha:"discard"});return await e.copyTo(n,{format:"RGBX"}),e.close(),n},Q=A=>{const n=A.length,e=new Uint8Array(n+12);e.set(new Uint8Array([n>>>24&255,n>>>16&255,n>>>8&255,255&n]),0),e.set(new Uint8Array([73,68,65,84]),4),e.set(A,8);const r=B(e.subarray(4,8+n));return e.set(new Uint8Array([r>>>24&255,r>>>16&255,r>>>8&255,255&r]),8+n),e};export const decodeJNG=async A=>{const B=(A=>{const e=((A,n)=>{const e=new Uint8Array(A),r=new DataView(A);for(let A=0;A<n.length;A++)if(e[A]!==n[A])throw Error("Wrong-Sign");let t=n.length,a=[];for(;t+12<=r.byteLength;){const A=r.getUint32(t,!1),n=i.decode(e.subarray(t+4,t+8)),o=e.subarray(t+8,t+8+A),w=e.subarray(t,t+12+A);if(t+12+A>r.byteLength)break;a.push({type:n,A,data:o,t:w}),t+=12+A}return a})(A,n);return{i:e,o:o(e,"JDAT").map((A=>A.data)),B:o(e,"JDAA").map((A=>A.data)),I:o(e,"IDAT").map((A=>A.t))}})(A),y=new Blob(B.o,a);let C=null;if(B.I?.length>0){const A=B.i.find((({type:A})=>"JHDR"==A));C=new Blob([e,E(A.data),...B.I,r],t)}else B.B?.length>0&&(C=new Blob(B.B,a));const s={C:"none",l:"default"},c=await createImageBitmap(y,s),l=C?await createImageBitmap(C,s):null,D=await(Promise.try((async()=>{const A=c.width*c.height*4,n=0+A,e=(l?n:0)+A,r=new WebAssembly.Memory({initial:A*(l?4:3)/65536+1}),t=r.buffer,a=(await WebAssembly.instantiate(w,{env:{memory:r}})).instance.exports;await I(c,new Uint8ClampedArray(t,0,A)),l&&(await I(l,new Uint8ClampedArray(t,n,A)),await a.mac(0,0,n,A));const i=await a.wpi(e,0,c.width,c.height);return new Uint8Array(t,e,i)}))?.catch?.(console.warn.bind(console))),U=new Set(["JDAT","JDAA","IDAT","IHDR","JHDR","IEND","JSEP"]),h=B.i.filter((({type:A})=>!U.has(A.toUpperCase()))).map((({t:A})=>A));return new Blob([e,g(c.width,c.height),...h,Q(D),r],t)};